class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        
        // Check if intervals is empty
        if (intervals.empty()) return {};
        
        // Sort intervals based on the start time
        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) 
        {
            return a[0] < b[0];
        });
        
        vector<vector<int>> result;

        result.push_back(intervals[0]);   // Add the first interval
        
        // Iterate through the sorted intervals
        for (int i = 1; i < intervals.size(); ++i) 
        {
            // If there is an overlap, merge intervals
            if (intervals[i][0] <= result.back()[1]) 
            {
                result.back()[1] = max(result.back()[1], intervals[i][1]);
            }
            else 
            {
                // No overlap, add the interval to the result
                result.push_back(intervals[i]);
            }
        }
        
        return result;
    }
};
