 int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        
        // Check if intervals is empty
        if (intervals.empty()) return 0;
        
        // Sort intervals based on the end time
        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });
        
        int count = 1;   // Count of non-overlapping intervals

        int end = intervals[0][1];   // End time of the last selected interval
        
        // Iterate through the sorted intervals
        for (int i = 1; i < intervals.size(); ++i)
        {
            // If the current interval doesn't overlap with the last selected interval
            if (intervals[i][0] >= end) 
            {
                count++;
                end = intervals[i][1];   // Update end time to the end time of current interval
            }
        }


        
        // Number of intervals to remove to make all remaining intervals non-overlapping
        int remove = intervals.size() - count;
        
        return remove;
    }
};




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    
    bool static cmp(vector<int>&a,vector<int>&b)
    {
        return a[1]<b[1];
    }
 
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        
            int n=intervals.size();

            sort(intervals.begin(),intervals.end(),cmp);
            int ans=0;

            int prev=0;


            for(int i=1;i<n;i++)
            {
                if(intervals[i][0]<intervals[prev][1])
                {
                    ans++;
                }   
                else
                {
                    prev=i;
                } 


            }

      
      return ans;

    }
};
