 bool static cmp(Job a ,Job b)
    {
        return a.profit>b.profit;
    }
    
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr,arr+n,cmp);   // Step 1: Sort jobs by profit in descending order


        // Step 2: Find the maximum deadline among all jobs

        int maxi=arr[0].dead;   // Initialize maxi with the deadline of the first job
        
        // Loop through the jobs to find the maximum deadline
        for(int i=1;i<n;i++)
        {
            maxi=max(maxi,arr[i].dead);
        }


        // Step 3: Initialize array to track time slots and variables for count and profit

        int slot[maxi+1];    // Create a slot array to keep track of scheduled jobs
        
        for(int i=0;i<=maxi;i++) slot[i]=-1;   // Initialize all slots as empty (-1)
        
        int cnt=0;   // Count of jobs scheduled
        int profit=0;  // Total profit obtained


        // Step 4: Assign jobs to slots based on their deadlines
        
        for(int i=0;i<n;i++)
        {
            // Traverse backwards from the job's deadline to find an available slot
            for(int j=arr[i].dead;j>0;j--)
            {
                if(slot[j]==-1)  // If slot j is available
                {
                    slot[j]=i;   // Schedule job i in slot j
                    cnt++;  // Increment count of scheduled jobs
                    
                    profit+=arr[i].profit;   // Add profit of job i to total profit
                    break;  // Break out of the loop after scheduling job i
                }
            }
        }



        // Step 5: Return the count of scheduled jobs and the total profit obtained
        
        return {cnt,profit};
        
    } 
