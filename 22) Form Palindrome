int longestPalindromicSubsequence(const string& s, int start, int end, vector<vector<int>>& memo) {
    // Base cases
    if (start > end) return 0;
    if (start == end) return 1;
    
    // Return memoized result if available
    if (memo[start][end] != -1) return memo[start][end];
    
    if (s[start] == s[end]) 
    {
        memo[start][end] = 2 + longestPalindromicSubsequence(s, start + 1, end - 1, memo);
    } 
    else 
    {
        memo[start][end] = max(longestPalindromicSubsequence(s, start + 1, end, memo),longestPalindromicSubsequence(s, start, end - 1, memo));
    }
    
    return memo[start][end];
}

int minInsertionsToPalindrome(const string& s) {
  
    int n = s.size();
    vector<vector<int>> memo(n, vector<int>(n, -1));
    
    // Length of the longest palindromic subsequence
    
    int lpsLength = longestPalindromicSubsequence(s, 0, n - 1, memo);
    
    // Minimum insertions required
    return n - lpsLength;
}
