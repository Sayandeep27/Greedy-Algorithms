int maxMeetings(int start[], int end[], int n)
    {
        // Initialize the count of meetings that can be attended to 1
        // We can always attend at least the first meeting
        int cnt = 1;

        // Vector to store meetings as pairs of (end time, start time)
        vector<pair<int, int>> meetings;

        // Populate the vector with the meetings
        for (int i = 0; i < n; i++) 
        {
            meetings.push_back({end[i], start[i]});
        }

        // Sort the meetings based on end time
        sort(meetings.begin(), meetings.end());

        // Track the end time of the last attended meeting
        int last_end_time = meetings[0].first;

        // Iterate through the remaining meetings
        for (int i = 1; i < n; i++) 
        {
            // If the start time of the current meeting is after the end time
            // of the last attended meeting, we can attend this meeting
            if (meetings[i].second > last_end_time) 
            {
                cnt++;  // Increment the count of meetings attended
                
                last_end_time = meetings[i].first;  // Update the end time to the current meeting's end time
            }
        }

        // Return the maximum number of meetings that can be attended
        return cnt;
    }
