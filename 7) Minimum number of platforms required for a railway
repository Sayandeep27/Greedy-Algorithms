int findPlatform(int arr[], int dep[], int n)
    {
        // Sort arrival times
        sort(arr, arr + n);

        // Sort departure times
        sort(dep, dep + n);

        // Initialize variables to track the number of platforms needed
        int platformneeded = 0;  // Current number of platforms needed
        int maxplatform = 0;     // Maximum number of platforms needed

        // Pointers to traverse arrival and departure arrays
        int i = 0;  // Pointer for arrival times
        int j = 0;  // Pointer for departure times

        // Traverse both arrays
        while (i < n && j < n) 
        {
            // If next event in sorted order is arrival, increment platform count
            if (arr[i] <= dep[j]) 
            {
                platformneeded++;  // A train has arrived, so increment platform count
                i++;  // Move to the next arrival
            }
            // If next event in sorted order is departure, decrement platform count
            else 
            {
                platformneeded--;  // A train has departed, so decrement platform count
                j++;  // Move to the next departure
            }

            // Update the maximum number of platforms needed
            maxplatform = max(maxplatform, platformneeded);
        }

        // Return the maximum number of platforms needed at any time
        return maxplatform;
    }
